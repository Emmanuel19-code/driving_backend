openapi: 3.0.0
info:
  title: Driving API Documentation
  version: 1.0.0
  description: API for managing student records and company services

tags:
  - name: Students
    description: Operations related to student records
  - name: Company Services
    description: Operations related to services offered by the company
  - name: Payment Api
    description: Operations related to Payment Services
  - name: Company Car 
    description: Operations relating to handling company cars
  - name: Schedule and TimeSlots
    description: Operations relating to generating timeSlots and handling assigning
  - name: Staff
    description: Operations relating to Staff

paths:

  /api/v1/companycar/add_car:
    post:
      summary: Registering a new Company car
      description: Create a new company car record in the system
      tags:
        - Company Car
      requestBody:
        required: true
        content:
          application/json:
           schema:
            type: object
            required:
              - carModel
              - carColour
              - carRegistrationNumber
              - carTransmissionType
            properties:
              carModel:
                type: string
                example: Vitz
              carColour:
                type: string
                example: red
              carRegistrationNumber:
                type: string
              carRoadWorthyExpiry:
                type: string
              carInsuaranceExpiry:
                type: string
              carTransmissionType:
                type: string
      responses:
        '201':
          description: Car Added successfully
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Validation failed
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Internal server error


  /api/v1/students/add_student:
    post:
      summary: Add a new student
      description: Create a new student record in the system
      tags:
        - Students
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - firstName
                - lastName
                - gender
                - email
                - serviceId
                - phoneOne
              properties:
                firstName:
                  type: string
                  example: John
                lastName:
                  type: string
                  example: Doe
                otherName:
                  type: string
                  example: Michael
                gender:
                  type: string
                  enum: [Male, Female]
                  example: Male
                email:
                  type: string
                  format: email
                  example: john.doe@example.com
                phoneOne:
                  type: string
                  example: "08012345678"
                phoneTwo:
                  type: string
                  example: "08098765432"
                serviceId:
                  type: string
                  example: Driving Lesson
      responses:
        '201':
          description: Student created successfully
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Validation failed
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Internal server error

  /api/v1/companycar/search_car/{carId}:
    get:
      summary: Getting a particular registered car
      description: Individual Car
      tags:
        - Company Car
      parameters:
        - in: query
          name: carId
          schema:
            type: string
          description: Filter by carId
      responses:
        '200':
          description: A car
          content:
           application/json:
            schema:
              type: object
              properties:
                carId:
                  type: string
                  example: 1234569
                carModel:
                  type: string
                  example: Vitz
                carColour: 
                  type: string
                  example: red
                carInsuaranceExpiry:
                  type: string
                  example: ""
                carTransmissionType:
                  type: string
                  example: manual
                carRoadWorthyExpiry:
                  type: string
                  example: ""
                carRegistrationNumber:
                  type: string
                  example: GT-7391-10
        '500':
          description: server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Internal server error


  /api/v1/companycar/get_cars:
    get:
      summary: Fetch All Registered Company cars
      description: Getting cars registered in the system
      tags:
        - Company Car
      responses:
        '200':
          description: A list of all cars
          content:
           application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  carId:
                    type: string
                    example: 1234569
                  carModel:
                    type: string
                    example: Vitz
                  carColour: 
                    type: string
                    example: red
                  carInsuaranceExpiry:
                    type: string
                    example: ""
                  carTransmissionType:
                    type: string
                    example: manual
                  carRoadWorthyExpiry:
                    type: string
                    example: ""
                  carRegistrationNumber:
                    type: string
                    example: GT-7391-10
        '500':
          description: server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Internal server error

          

  /api/v1/students/fetch_students:
    get:
      summary: Fetch all students
      description: Retrieve a list of all registered students
      tags:
        - Students
      responses:
        '200':
          description: A list of students
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    studentId:
                      type: string
                      example: STU2024-001
                    firstName:
                      type: string
                      example: John
                    lastName:
                      type: string
                      example: Doe
                    otherName:
                      type: string
                      example: Michael
                    gender:
                      type: string
                      example: Male
                    email:
                      type: string
                      example: john.doe@example.com
                    phoneOne:
                      type: string
                      example: "08012345678"
                    phoneTwo:
                      type: string
                      example: "08098765432"
                    serviceType:
                      type: string
                      example: Driving Lesson
                    createdAt:
                      type: string
                      format: date-time
                      example: 2024-05-20T10:00:00Z
                    updatedAt:
                      type: string
                      format: date-time
                      example: 2024-05-21T14:30:00Z
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Internal server error

  /api/v1/students/search_student:
    get:
      summary: Search for students
      description: Search students by name, email, or service type
      tags:
        - Students
      parameters:
        - in: query
          name: firstName
          schema:
            type: string
          description: Filter by first name
        - in: query
          name: lastName
          schema:
            type: string
          description: Filter by last name
        - in: query
          name: email
          schema:
            type: string
            format: email
          description: Filter by email
        - in: query
          name: serviceType
          schema:
            type: string
          description: Filter by service type
      responses:
        '200':
          description: Matching students found
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    studentId:
                      type: string
                      example: STU2024-001
                    firstName:
                      type: string
                      example: John
                    lastName:
                      type: string
                      example: Doe
                    email:
                      type: string
                      example: john.doe@example.com
                    serviceType:
                      type: string
                      example: Driving Lesson
        '400':
          description: Invalid search criteria
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid search query
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Internal server error

  /api/v1/services/add_newService:
    post:
      summary: Add a new Company Service
      description: Add a service offered by the organization
      tags:
        - Company Services
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - serviceType
                - serviceDescription
                - fee
                - totalDuration
                - noOfDaysInClass
                - noOfPracticalHours
                - allowedDays
              properties:
                serviceType:
                  type: string
                  example: Driving Test Preparation
                serviceDescription:
                  type: string
                  example: An intensive course to prepare students for the road test.
                totalDuration:
                  type: string
                  example: An intensive course to prepare students for the road test.
                noOfDaysInClass:
                  type: string
                  example: An intensive course to prepare students for the road test.
                noOfPracticalHours:
                  type: string
                  example: An intensive course to prepare students for the road test.
                allowedDays:
                  type: string
                  example: An intensive course to prepare students for the road test.
                fee:
                  type: string
                  example: "15000"
      responses:
        '201':
          description: Service created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Service added successfully
                  data:
                    type: object
                    properties:
                      serviceId:
                        type: string
                        example: SVC-54893
                      serviceType:
                        type: string
                        example: Driving Test Preparation
                      serviceDescription:
                        type: string
                        example: An intensive course to prepare students for the road test.
                      fee:
                        type: string
                        example: "15000"
                      duration:
                        type: string
                        example: 4 weeks
                      createdAt:
                        type: string
                        format: date-time
                        example: 2025-06-03T10:20:00Z
                      updatedAt:
                        type: string
                        format: date-time
                        example: 2025-06-03T10:20:00Z
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Validation error
        '409':
          description: Service already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Service already exists
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Internal server error

  /api/v1/services/getAllServices:
    get:
      summary: Get Registered Services
      description: Retrieve a list of all registered services
      tags:
        - Company Services
      responses:
        '200':
          description: A list of services
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    name:
                      type: string
                      example: Web Development
                    description:
                      type: string
                      example: Building websites and web applications
                    createdAt:
                      type: string
                      format: date-time
                      example: "2025-06-04T12:34:56Z"
                    updatedAt:
                      type: string
                      format: date-time
                      example: "2025-06-04T12:34:56Z"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Internal server error

  /api/v1/services/delete_service/{serviceId}:
    delete:
      summary: Delete a registered service
      description: Deletes a specific service by its serviceId
      tags:
        - Company Services
    parameters:
      - in: path
        name: serviceId
        required: true
        schema:
          type: string
        description: ID of the service to delete
    responses:
      '200':
        description: Service deleted successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                msg:
                  type: string
                  example: Service deleted successfully
      '400':
        description: Service ID is missing or invalid
        content:
          application/json:
            schema:
              type: object
              properties:
                msg:
                  type: string
                  example: Service ID is required to delete
      '404':
        description: Service not found
        content:
          application/json:
            schema:
              type: object
              properties:
                msg:
                  type: string
                  example: Service not found
      '500':
        description: Internal server error
        content:
          application/json:
            schema:
              type: object
              properties:
                msg:
                  type: string
                  example: Internal server error
        
  /api/v1/payment/make_payment:
    post:
      summary: Add a new Company Service
      description: Add a service offered by the organization
      tags:
        - Payment Api
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - paidBy
                - paymentMethod
                - phoneNumber
                - amountPaid
              properties:
                paidBy:
                  type: string
                  example: string
                paymentMethod:
                  type: string
                  example: Cash
                phoneNumber:
                  type: string
                  example: "0000000000"
                amountPaid:
                  type: string
                  example: 1500
      responses:
        '201':
          description: Service created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Payment made successfully
                  data:
                    type: object
                    properties:
                      paymentId:
                        type: string
                        example: SVC-54893
                      paymentMethod:
                        type: string
                        example: Cash
                      phoneNumber:
                        type: string
                        example: 0000000000.
                      amountPaid:
                        type: string
                        example: "15000"
                      paidBy:
                        type: string
                        example: string
                      createdAt:
                        type: string
                        format: date-time
                        example: 2025-06-03T10:20:00Z
                      updatedAt:
                        type: string
                        format: date-time
                        example: 2025-06-03T10:20:00Z
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Validation error
        '409':
          description: Service already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Service already exists
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Internal server error

  /api/v1/companycar/recharge_fuel:
    post:
      summary: Record a fuel refill for a company car
      description: Logs a fuel refill transaction for a registered company vehicle.
      tags:
        - Company Car
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - carRegistrationNumber
                - amount
                - litres
                - refilledBy
              properties:
                carRegistrationNumber:
                  type: string
                  example: CAR-2024-001
                amountloaded:
                  type: number
                  example: 250.00
                litres:
                  type: number
                  example: 40
                refilledBy:
                  type: string
                  example: John Doe
      responses:
        '201':
          description: Fuel refill recorded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Fuel refill saved successfully
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Validation failed
        '409':
          description: Refill could not be saved
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Could not save the record
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Internal server error

  /api/v1/companycar/monthly-amount:
    get:
      summary: Get total fuel amount spent per month
      description: Returns the total amount spent on fuel for each month in a given year.
      tags:
        - Company Car
      parameters:
        - in: query
          name: year
          schema:
            type: integer
            example: 2024
          required: false
          description: Year to retrieve monthly fuel totals for. Defaults to current year if not provided.
      responses:
        '200':
          description: Monthly fuel spending totals
          content:
            application/json:
              schema:
                type: object
                properties:
                  year:
                    type: integer
                    example: 2024
                  totalAmount:
                    type: object
                    additionalProperties:
                      type: number
                      example: 1500
                    example:
                      January: 1200
                      February: 900
                      March: 0
                      April: 1600
                      May: 3000
                      June: 0
                      July: 0
                      August: 0
                      September: 0
                      October: 0
                      November: 0
                      December: 0
                  message:
                    type: string
                    example: Total fuel amount spent per month for 2024
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Internal server error

  /api/v1/companycar/monthly-litres-car-consumption:
    get:
      summary: Get monthly litres consumption per car
      description: Returns the total litres of fuel consumed each month by each car for a specified year.
      tags:
        - Company Car
      parameters:
        - in: query
          name: year
          schema:
            type: integer
            example: 2025
          required: true
          description: The year for which to retrieve litres consumption (e.g. 2025)
      responses:
        '200':
          description: Monthly litres consumption data returned successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  year:
                    type: integer
                    example: 2025
                  data:
                    type: object
                    additionalProperties:
                      type: object
                      properties:
                        January:
                          type: number
                          example: 0
                        February:
                          type: number
                          example: 0
                        March:
                          type: number
                          example: 0
                        April:
                          type: number
                          example: 0
                        May:
                          type: number
                          example: 0
                        June:
                          type: number
                          example: 40
                        July:
                          type: number
                          example: 0
                        August:
                          type: number
                          example: 0
                        September:
                          type: number
                          example: 0
                        October:
                          type: number
                          example: 0
                        November:
                          type: number
                          example: 0
                        December:
                          type: number
                          example: 0
                  message:
                    type: string
                    example: Monthly litres consumption by each car for 2025
        '400':
          description: Invalid or missing year parameter
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: A valid year must be provided in the query (e.g., ?year=2025)
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Internal server error

  /api/v1/companycar/documents:
    post:
      summary: Add a new document for a car
      tags:
        - Company Car
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - carRegistrationNumber
                - documentType
                - expiryDate
              properties:
                carRegistrationNumber:
                  type: string
                  example: "CAR-2024-001"
                  description: The car's registration number
                documentType:
                  type: string
                  example: "Insurance"
                  description: The type of document
                expiryDate:
                  type: string
                  format: date
                  example: "2026-12-31"
                  description: Expiry date of the document (must be a future date)
      responses:
        '201':
          description: Document added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Document successfully added
                  data:
                    type: object
                    properties:
                      docId:
                        type: string
                        format: uuid
                        example: "a1b2c3d4-e5f6-7890-ab12-cd345ef67890"
                      carRegistrationNumber:
                        type: string
                        example: "CAR-2024-001"
                      documentType:
                        type: string
                        example: "Insurance"
                      expiryDate:
                        type: string
                        format: date
                        example: "2026-12-31"
                      renewed:
                        type: boolean
                        example: false
        '400':
          description: Bad request - validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Car registration number is required"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Internal server error"

  /api/v1/companycar/documents/{docId}/renew:
    put:
      summary: Renew a car document
      tags:
        - Company Car
      parameters:
        - name: docId
          in: path
          required: true
          description: UUID of the car document to renew
          schema:
            type: string
            format: uuid
            example: "a1b2c3d4-e5f6-7890-ab12-cd345ef67890"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - carRegistrationNumber
                - documentType
                - expiryDate
              properties:
                expiryDate:
                  type: string
                  format: date
                  example: "2027-12-31"
                  description: The new expiry date for the document
                carRegistrationNumber:
                  type: string
                  example: "CAR-2024-001"
                documentType:
                  type: string
                  example: "Insurance"
      responses:
        '200':
          description: Document renewed successfully or already renewed message
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Document renewed successfully
                  data:
                    type: object
                    properties:
                      docId:
                        type: string
                        format: uuid
                        example: "a1b2c3d4-e5f6-7890-ab12-cd345ef67890"
                      renewed:
                        type: boolean
                        example: true
                      expiryDate:
                        type: string
                        format: date
                        example: "2027-12-31"
        '400':
          description: Bad request - invalid input or document already renewed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Document is already renewed
        '404':
          description: Document not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Document with given id not found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Internal server error
  

  /api/v1/bookingAndslots/generate:
    post:
      summary: Generate available time slots
      description: Generates 1-hour time slots for each provided day between startTime and endTime.
      tags:
        - Schedule and TimeSlots
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                days:
                  oneOf:
                    - type: string
                      example: "Monday"
                    - type: array
                      items:
                        type: string
                      example: ["Monday", "Wednesday", "Friday"]
                startTime:
                  type: string
                  example: "08:00"
                endTime:
                  type: string
                  example: "14:00"
              required:
                - days
                - startTime
                - endTime
      responses:
        "201":
          description: Time slots generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Time slots generated successfully.
                  slots:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        day:
                          type: string
                          example: Monday
                        startTime:
                          type: string
                          example: "08:00"
                        endTime:
                          type: string
                          example: "09:00"
                        isBooked:
                          type: boolean
                          example: false
        "400":
          description: Bad request (missing fields)
        "500":
          description: Internal server error

  /api/v1/bookingAndslots/generated_slots:
    get:
      summary: Get all generated time slots
      description: Retrieves all time slots generated in the system.
      tags:
        - Schedule and TimeSlots
      responses:
        '200':
          description: A list of available time slots
          content:
            application/json:
              schema:
                type: object
                properties:
                  slots:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        startTime:
                          type: string
                          format: time
                          example: "09:00"
                        endTime:
                          type: string
                          format: time
                          example: "10:00"
                        day:
                          type: string
                          example: "Monday"
        '409':
          description: Conflict or failed to fetch time slots
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Failed to generate time slots."
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "An unexpected error occurred."

  /api/v1/bookingAndslots/allocate_slot:
    post:
      summary: Create a booking
      description: Creates booking(s) for a student and driver using one or more timeSlot IDs.
      tags:
        - Schedule and TimeSlots
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - timeSlotIds
                - studentId
                - driverId
              properties:
                timeSlotIds:
                  type: array
                  minItems: 1
                  items:
                    type: string
                    format: uuid
                  description: List of timeSlot IDs to book
                studentId:
                  type: string
                  format: uuid
                  description: The ID of the student
                driverId:
                  type: string
                  format: uuid
                  description: The ID of the instructor
      responses:
        '201':
          description: Booking(s) created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Booking(s) created successfully.
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Booking'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "timeSlotIds is required"
        '409':
          description: Conflict — timeSlot already booked
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: Time slot already booked and not yet completed.
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: Internal server error.

  /api/v1/staff/register_staff:
    post:
      summary: Register a new instructor
      description: Creates a new instructor account with validated input data.
      tags:
        - Staff
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - fullName
                - email
                - phoneOne
                - Role
              properties:
                fullName:
                  type: string
                  example: "John Doe"
                email:
                  type: string
                  format: email
                  example: "johndoe@example.com"
                phoneOne:
                  type: string
                  example: "+233501234567"
                phoneTwo:
                  type: string
                  example: "+233541234567"
                Role:
                  type: string
                  example: "Instructor"
      responses:
        '201':
          description: Instructor registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "Instructor added successfully."
                  data:
                    $ref: '#/components/schemas/Instructor'
        '400':
          description: Bad request - validation error or email already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "An account is registered with this email"
                  error:
                    type: string
                    example: "Validation failed: email is required"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal Server Error"

components:
  schemas:
    Instructor:
      type: object
      properties:
        staffId:
          type: string
          example: "STAFF2025-001"
        fullName:
          type: string
          example: "John Doe"
        email:
          type: string
          example: "johndoe@example.com"
        phoneOne:
          type: string
          example: "+233501234567"
        phoneTwo:
          type: string
          example: "+233541234567"
        Role:
          type: string
          example: "Instructor"
        createdAt:
          type: string
          format: date-time
          example: "2025-06-13T15:00:00.000Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-06-13T15:00:00.000Z"


    Booking:
      type: object
      properties:
        id:
          type: string
          format: uuid
        timeSlotId:
          type: string
          format: uuid
        studentId:
          type: string
          format: uuid
        driverId:
          type: string
          format: uuid
        status:
          type: string
          enum: [pending, completed, cancelled]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
